version: '3.8'

services:
  # Spring Boot Backend
  backend:
    image: ${DOCKER_REGISTRY}/student-management-system-backend:${DOCKER_TAG:-latest}
    container_name: sms-backend-prod
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: ${NEON_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${NEON_DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${NEON_DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_STUDENTMANAGEMENT: DEBUG
    ports:
      - "8083:8080"
    networks:
      - sms-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    image: ${DOCKER_REGISTRY}/student-management-system-frontend:${DOCKER_TAG:-latest}
    container_name: sms-frontend-prod
    environment:
      VITE_API_BASE_URL: https://api.yourdomain.com/api
      NODE_ENV: production
    ports:
      - "3003:5173"
    depends_on:
      - backend
    networks:
      - sms-prod-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: sms-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - sms-prod-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: sms-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - sms-prod-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sms-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - sms-prod-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sms-grafana-prod
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - sms-prod-network
    restart: unless-stopped

volumes:
  redis_prod_data:
  prometheus_data:
  grafana_data:

networks:
  sms-prod-network:
    driver: bridge
