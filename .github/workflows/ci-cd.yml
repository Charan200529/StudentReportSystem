name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: student_management_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests
      run: |
        cd backend
        mvn clean test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: student_management_test
        DB_USERNAME: postgres
        DB_PASSWORD: password
        JWT_SECRET: testSecretKey123456789012345678901234567890
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build backend
      run: |
        cd backend
        mvn clean package -DskipTests
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Build Docker images
      run: |
        docker build -t sms-backend ./backend
        docker build -t sms-frontend ./frontend
    
    - name: Save Docker images
      run: |
        docker save sms-backend | gzip > backend-image.tar.gz
        docker save sms-frontend | gzip > frontend-image.tar.gz
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          backend-image.tar.gz
          frontend-image.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: docker-images
    
    - name: Load Docker images
      run: |
        gunzip -c backend-image.tar.gz | docker load
        gunzip -c frontend-image.tar.gz | docker load
    
    - name: Deploy to AWS (placeholder)
      run: |
        echo "Deploying to AWS..."
        echo "Backend: sms-backend"
        echo "Frontend: sms-frontend"
        echo "Database: PostgreSQL on AWS RDS"
        # Add actual AWS deployment commands here
        # aws ecs update-service --cluster sms-cluster --service sms-backend-service --force-new-deployment
        # aws ecs update-service --cluster sms-cluster --service sms-frontend-service --force-new-deployment
